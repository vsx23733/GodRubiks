# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Rubik_Cube_app.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from rubiksCube import RubikCube
import pyfiglet
import sys
import cubeAI # Import the cubeSolver module if the user wants to solve the App's cube

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1444, 914)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 1411, 851))
        self.groupBox.setObjectName("groupBox")

        # Configuring buttons
        self.digitalizeButton = QtWidgets.QPushButton(self.groupBox)
        self.digitalizeButton.setGeometry(QtCore.QRect(10, 760, 621, 71))
        self.digitalizeButton.setObjectName("digitalizeButton")
        self.digitalizeButton.clicked.connect(self.digitizeYourCubeButtonClicked)

        self.useAppCubeButton = QtWidgets.QPushButton(self.groupBox)
        self.useAppCubeButton.setGeometry(QtCore.QRect(770, 760, 621, 71))
        self.useAppCubeButton.setObjectName("useAppCubeButton")
        self.useAppCubeButton.clicked.connect(self.useAppCubeButtonClicked)

        # Configuring Welcome text
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox)
        self.plainTextEdit.setGeometry(QtCore.QRect(0, 20, 1401, 131))
        self.plainTextEdit.setObjectName("plainTextEdit")

        

        # Configuring labels for text cover of the App
        self.digitalizerCoverLabel = QtWidgets.QLabel(self.groupBox)
        self.digitalizerCoverLabel.setGeometry(QtCore.QRect(40, 210, 581, 421))
        self.digitalizerCoverLabel.setObjectName("digitalizerCoverLabel")
        self.setTextCoverDigitalization()

        self.useAppFeautureCoverLabel = QtWidgets.QLabel(self.groupBox)
        self.useAppFeautureCoverLabel.setGeometry(QtCore.QRect(790, 210, 581, 421))
        self.useAppFeautureCoverLabel.setObjectName("useAppFeautureCover")
        self.setTextCoverAppFeature()

        # Configuring the central widget
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1444, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Home"))
        self.digitalizeButton.setText(_translate("MainWindow", "Digitize your Rubiks Cube"))
        self.plainTextEdit.setPlainText(_translate("MainWindow", "Welcome to my Rubik\'s cube App\n"
"\n"
"Here we play with Rubik\'s Cubes to solve them\n"
"You got two options. You can either digitalize your cube and my app will solve it, or scramble the digital cube I own then see how my app solve it. \n"
"\n"
"You have the choice !! \n"
"Take fun and learn ðŸ˜‰"))
        self.digitalizerCoverLabel.setText(_translate("MainWindow", "TextLabel"))
        self.useAppCubeButton.setText(_translate("MainWindow", "Use App\'s Rubik\'s Cube"))
        self.digitalizerCoverLabel.setText(_translate("MainWindow", "TextLabel"))

    def digitizeYourCubeButtonClicked(self):
        # Code to be executed when the digitize your cube button is clicked
        pass

    def useAppCubeButtonClicked(self) : 
        # Code to be executed when the use app button is clicked 

        # Should open a new window where we have the Rubik cube of the app initialized 
        # That window should have scramble button, resolve button, is_resolved button
        self.go_to_app_cube_window()
        pass

    def setTextCoverAppFeature(self):
        # Call the str representation of the cube (2D Visualization) for the covers

        cube = RubikCube()
        str_visualization = cube.str_that_cube()
        self.useAppFeautureCoverLabel.setText(str_visualization)

    def setTextCoverDigitalization(self):
        # Write in ascii Art Digitalization and set it as the text for the Label of the Digitalizer cover

        ascii_text = pyfiglet.figlet_format(text="DIGITALIZATION", font="slant")
        self.digitalizerCoverLabel.setText(ascii_text)

    def go_to_app_cube_window(self):
        # Code to be executed when the use app button is clicked
        self.appCubeWindow = AppCubeWindow(cube=RubikCube())
        self.appCubeWindow.show()
        return

class AppCubeWindow(QtWidgets.QWidget):
    def __init__(self, cube : RubikCube):
        super().__init__()
        self.setWindowTitle("App Cube Window")
        self.resize(500, 500)
        self.setStyleSheet("background-color: black; color: black;")

        self.cube = cube

        # Configuring buttons
        self.scrambleButton = QtWidgets.QPushButton("Scramble", self)
        self.scrambleButton.move(100, 100)
        self.scrambleButton.setStyleSheet("background-color: white; color: black;")
        self.scrambleButton.clicked.connect(self.scramble_app_cube)

        self.resolveButton = QtWidgets.QPushButton("Resolve", self)
        self.resolveButton.move(200, 100)
        self.resolveButton.setStyleSheet("background-color: white; color: black;")
        self.resolveButton.clicked.connect(self.resolve_app_cube)

        self.resetCubeButton = QtWidgets.QPushButton("Reset", self)
        self.resetCubeButton.move(300, 100)
        self.resetCubeButton.setStyleSheet("background-color: white; color: black;")
        self.resetCubeButton.clicked.connect(self.reset_app_cube)

        # Configuring labels for 2D visualization of the cube
        self.cubeVisualizationLabel = QtWidgets.QLabel(self)
        self.cubeVisualizationLabel.setGeometry(QtCore.QRect(40, 210, 581, 421))
        self.cubeVisualizationLabel.setObjectName("cubeVisualizationLabel")
        self.setCubeVisualizationLabel()
        

    def scramble_app_cube(self):
        # Code to be executed when the scramble button is clicked
        self.cube = self.cube.scramble()
        self.cubeVisualizationLabel.setText(self.cube.str_that_cube())
        return
    
    def resolve_app_cube(self):
        # Code to be executed when the resolve button is clicked
        cubeSolver.Solver(self.cube)
        return

    def reset_app_cube(self):
        # Code to be executed when the reset button is clicked
        self.cube = RubikCube()
        self.cubeVisualizationLabel.setText(self.cube.str_that_cube())
        return
    
    def setCubeVisualizationLabel(self):
        # Call the str representation of the cube (2D Visualization) for the covers
        str_visualization = self.cube.str_that_cube()
        self.cubeVisualizationLabel.setText(str_visualization)

    ## That shit is working 
    # Next now is to make the cube solver work with the app




if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())